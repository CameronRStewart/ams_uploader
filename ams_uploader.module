<?php
/**
 * @file
 * A description of what your module does.
 */


// TODO: adding http url works, but toggling authenticated doesnt seem to work.
// TODO: Test adding/removing subdirectory
// TODO: Fix 'stream_cast is not implemented' warning.
// TODO: Add admin menu options to add one or many local server names (to test locality of files)
// TODO: Add admin menu options to add 'applications dirs' for RTMP and HTML streams.
// TODO: javascript to disable url box upon submission of new file (vice versa would be nice too).
// TODO: Disable url field on managed files.
// TODO: New categories automatically create pages with all items assigned to that category.
// TODO: Attach managed media to media upload form (after submission of verified local URL)


function ams_uploader_menu() {
    $items = array();

    $items['admin/config/services/ams_uploader'] = array(
        'title' => t('AMS Uploader Module Settings'),
        'description' => 'Configure FQDN for media streaming server.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ams_uploader_admin_form'),
        'access arguments' => array('administer ams uploader module settings'),
        'file' => 'ams_uploader.admin_form.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/services/ams_uploader/settings'] = array(
        'title' => t('Settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );

    return $items;
}

function ams_uploader_permission() {
    return array(
        'administer ams uploader settings' => array(
            'title' => t('Administer ams uploader configuration'),
            'description' => t('Perform administration tasks on ams uploader module.'),
        ),
    );
}

/**
 * Implements hook_node_access().
 */
function ams_uploader_node_access($node, $op, $account) {
    $type = is_string($node) ? $node : $node->type;
    //If user is viewing media content type and they are not auth user, don't show page
    if ($type == 'media' && $op == 'view' && $node->field_authenticated[$node->language][0]['value'] == 1) {
        if (in_array('anonymous user', $account->roles)) {
            return NODE_ACCESS_DENY;
        }
    }
}

function ams_uploader_form_media_node_form_alter(&$form, &$form_state){

    // For form builder functions, js must be added as such:
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'ams_uploader') . '/scripts/ams_uploader.js',
    );

    array_unshift($form['#validate'], 'ams_uploader_media_node_form_validate');

    $form['title']['#weight'] = -5;
    $form['body']['#weight'] = 1;

    $form['media_group'] = array(
        '#type' => 'fieldset',
        '#title' => t('Media Source:  Add an uploaded file OR an URL (Not Both).'),
        '#weight' => 2,
    );

    $form['media_group']['field_media_upload'] = $form['field_media_upload'];
    $form['media_group']['field_media_url'] = $form['field_media_url'];

    unset($form['field_media_upload']);
    unset($form['field_media_url']);

    $form['field_authenticated']['#weight'] = 3;
    $form['field_directory']['#weight'] = 4;
    $form['field_category']['#weight'] = 5;
    $form['field_tags']['#weight'] = 6;


    return $form;
}

function ams_uploader_media_node_form_validate($form, &$form_state){
    // TODO: cant validate upload OR url - they will both exist after file is managed.  Instead, if file is managed - disable url.
    // TODO: deetect if uri parses to currently managed file.  If so, error and give link to page.

    $media_url = $form_state['values']['field_media_url']['und'][0]['value'];
    $media_upload = $form_state['values']['field_media_upload']['und'][0]['fid'];

    $has_value_url = isset($media_url) && !($media_url == "");
    $has_value_upload = isset($media_upload) && !($media_upload == 0);

    if (!($has_value_url) && !($has_value_upload)){
        form_set_error('field_media_upload', t("You must either upload a media file OR enter a valid media url."));
        form_set_error('field_media_url');
    }
    if ($has_value_upload && $has_value_url){
        form_set_error('field_media_url', t('You may ONLY have EITHER a media file uploaded OR a media url.'));
    }
    if($has_value_url && !(is_http($media_url) || is_rtmp($media_url))){
        form_set_error('field_media_url', t('You have entered an invalid media URL.  It must start with http, https, or rtmp.'));
    }
    if($has_value_url) {
        // Make sure this stream exists
    }

}

function is_http($media_url) {
    return (strpos($media_url, 'http') === 0);
}

function is_rtmp($media_url) {
    return (strpos($media_url, 'rtmp') === 0);
}

function remove_str_between($delimiter1, $delimiter2, $uri) {

    /**
     * This function will take a string like rtmp://libmedia.unm.edu/vod/mp4:test3.f4v,
     * remove the mp4: part and return the rest: rtmp://libmedia.unm.edu/vod/test3.f4v
     */

    $slice_front = strpos($uri, $delimiter1);
    $slice_back = strpos($uri, $delimiter2);

    if($slice_front === false || $slice_back === false) {
        return $uri;
    }
    else {
        $remove_str = substr($uri, $slice_front, ($slice_back + strlen($delimiter2)) - $slice_front);
        return str_replace($remove_str, '/', $uri);
    }
}

function strip_filetype_prefix($string, $delimiter) {
    $slice = strpos($string, $delimiter);

    if($slice === false){
        return $string;
    }
    else {
        $remove_str = substr($string, 0, ($slice + strlen($delimiter)));
        return str_replace($remove_str, '', $string);
    }
}

function get_local_path_or_false($media_url) {

    /**
     * When a URL is passed in for saving, we need to check whether that URL can be
     * parsed and if it points to something on the designated streaming server for this install.
     * This function parses a url, and tries to load it to make sure this file is both local and exists.
     *
     * Examples:
     *  mp4: rtmp://libmedia.unm.edu/vod/mp4:test3.f4v
     *  flv: rtmp://libmedia.unm.edu/unm/NavajoFilmThemselves/NavajoFilmThemselves_1-2
     *  flv: http://libmedia.unm.edu/vod/bingaman/A1-05/F02.flv with a bunch of options after the &...
     *
     * Paths we need from these:
     *  ams://applications/vod/media/test3.f4v
     *  ams://applications/unm/media/NavajoFilmThemselves/NavajoFilmThemselves_1-2.flv
     *  ams://webroot/vod/bingaman/A1-05/02.flv
    **/

    // TODO: deal with flv files with no extension

    $parsed_url_path = explode('/', $media_url, 5);
    $application = $parsed_url_path[3];
    $path_tail = $parsed_url_path[4];

    // Remove AMS required filetype prefixes.
    //$path_tail = remove_str_between('/', ':', $path_tail);
    $path_tail = strip_filetype_prefix($path_tail, ':');

    if (is_http($media_url)) {
        $local_path = 'ams://webroot/' . $application . '/' . $path_tail;
    }
    else if (is_rtmp($media_url)) {
        $local_path = 'ams://applications/' . $application . '/media/' . $path_tail;
        // appdir/media/subdir
    }
    else {
        return false;
    }

    if(file_exists($local_path)) {
        return $local_path;
    }
    else {
        return false;
    }

}


function get_new_path($appName, $subDir) {
    // TODO: create seperate filesystem wrappers for RTMP and HTML urls.

    $protocolDir = 'applications';
    $appDir = 'ams://' . $protocolDir . '/' . $appName . '/media';
    $newpath = $appDir . $subDir;

    return $newpath;



}

function get_filename_and_extension($uri) {
    $ext = pathinfo($uri, PATHINFO_EXTENSION);
    $filename_no_ext = pathinfo($uri, PATHINFO_FILENAME);

    //Use extension to determine how to build the rtmp url correctly
    if ($ext == '' || empty($ext)) {
        $ext = "flv";
    }

    $split_name = array($filename_no_ext, $ext);

    return $split_name;

}

function generate_url($basename, $ext, $subDir, $appName) {
    //Grab the FQDN of the media stremaing server
    $result = db_query('SELECT * FROM ams_uploader_admin_vars');

    foreach ($result as $row) {
        $fqdn = $row->name;
    }


    //Generate rtmp url for file
    if(!(empty($subDir)) || !($subDir == '')){
        $subDir = $subDir . '/';
    }

    $url = 'rtmp://' . $fqdn . '/' . $appName . '/' . $subDir;
    //Use extension to determine how to build the rtmp url correctly
    if ($ext == 'mp4' || $ext == 'f4v') {
        $amsExt = 'mp4' . ':';
    }
    else {
        if ($ext == 'flv') {
            $amsExt = '';
            $ext = '';
        }
        else {
            $amsExt = $ext . ':';
        }
    }
    //Add dot to extension if it exists
    if (!empty($ext)) {
        $ext = '.' . $ext;
    }

    $new_url = $url . $amsExt . $basename . $ext;

    return $new_url;
}

/**
 * Implements hook_node_presave().
 */
function ams_uploader_node_presave($node) {

    global $user;
    if ($node->type == 'media') {


        // Media was uploaded or media already managed.
        if(isset($node->field_media_upload[$node->language][0]['fid']) && !empty($node->field_media_upload[$node->language][0]['fid'])) {
            $fid = $node->field_media_upload[$node->language][0]['fid'];
            $file = file_load($fid);
            list($filename_no_ext, $ext) = get_filename_and_extension($file->uri);
        // New node, entered URL.
        } else if (isset($node->field_media_url[$node->language][0]['value'])) {
            $url = $node->field_media_url[$node->language][0]['value'];

            $is_local_uri = get_local_path_or_false($url);

            if($is_local_uri) {

                // Set up Drupal file object and have drupal manage it from now on.
                list($filename_no_ext, $ext) = get_filename_and_extension($is_local_uri);
                $filename = $filename_no_ext . '.' . $ext;
                $file = new stdClass;
                $file->uid = $user->uid;
                $file->filename = $filename;
                $file->uri = $is_local_uri;
                $finfo = finfo_open(FILEINFO_MIME_TYPE);
                $mime = finfo_file($finfo, $is_local_uri);
                finfo_close($finfo);
                $file->filemime = $mime;
                $file->filesize = filesize($is_local_uri);
                $file->status = 1;
                file_save($file);

                $type = 'streaming media file';
                $id = $file->fid;
                file_usage_add($file, 'ams_uploader', $type, $id);

                $node->field_media_upload[$node->language][0]['fid'] = $file->fid;
                $node->field_media_upload[$node->language][0]['display'] = 1;

                if ($file === FAlSE) {
                    return;
                }
            }
            else {
                // Not a local URL, Nothing to be done. Create video node using existing url.
                return;
            }

        } else {
            form_set_error('title', t('Neither URL nor Media upload is set.  This doesnt make sense.'));
            return;
        }

        if($file){
            $filename = $file->filename;
        } else {
            return;

        }


        $subDir = empty($node->field_directory[$node->language][0]) ? '' : '/' . $node->field_directory[$node->language][0]['value'];
        $authenticated = !($node->field_authenticated[$node->language][0]['value'] == 0);
        $appName = $authenticated ? 'unm' : 'vod';
        // Returns path to directory file will be placed in.
        $newpath = get_new_path($appName, $subDir);


        if (!empty($subDir) && !file_prepare_directory($newpath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
            throw new Exception('Error saving node: Cannot create new directory.');
        }

        //Complete path with filename
        $newpath = $newpath . '/' . $filename;

        //Only move file if a new location has been designated
        if ($file->uri != $newpath) {
            $file = file_move($file, $newpath, FILE_EXISTS_RENAME);
            if ($file === FALSE) {
                throw new Exception('Could not copy file to ' . $newpath . '. Check permissions.');
            }
        }

        //Set rtmp url to text field
        $node->field_media_url[$node->language][0]['value'] = generate_url($filename_no_ext, $ext, $subDir, $appName);

    }
}

/**
 * Implements hook_field_formatter_info().
 */
function ams_uploader_field_formatter_info() {
    return array(
        'ams_formatter' => array(
            'label' => 'AMS Player',
            'description' => 'Flash player to embed videos/audo from Adobe Media Server',
            'field types' => array('text'),
            'settings' => array( //Array of the settings we'll create
                'video_width' => '640', //default value for width
                'video_height' => '480', //default for height
            ),
        )
    );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ams_uploader_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
    //This gets the view_mode where our settings are stored
    $display = $instance['display'][$view_mode];
    //This gets the actual settings
    $settings = $display['settings'];
    //Initialize the element variable
    $element = array();
    //Add your select box
    $element['video_width'] = array(
        '#type' => 'text',
        '#title' => t('Video Width'),
        '#description' => t('Set the width of the video (pixels)'),
        '#default_value' => $settings['video_width'],
    );
    $element['video_height'] = array(
        '#type' => 'text',
        '#title' => t('Video Height'),
        '#description' => t('Set the height of the video (pixels)'),
        '#default_value' => $settings['video_height'],
    );
    return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ams_uploader_field_formatter_settings_summary($field, $instance, $view_mode) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $summary = t('Use width @widthpx and height @heightpx ', array(
        '@width' => $settings['video_width'],
        '@height' => $settings['video_height'],
    )); // we use t() for translation and placeholders to guard against attacks
    return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function ams_uploader_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array(); // Initialize the var
    $mod_path = drupal_get_path('module', 'ams_uploader');
    $settings = $display['settings']; // get the settings
    $width = $settings['video_width'];
    $height = $settings['video_height'];

    $player = base_path() . $mod_path . '/swfs/StrobeMediaPlayback.swf';

    // Create the object code
    foreach ($items as $delta => $item) {
        $url = $item['safe_value']; // Getting the actual value
        //Generate object code with player and url embedded
        $embedCode = '
    <object type="application/x-shockwave-flash" data="' . $player . '"
      width="' . $width . '" height="' . $height . '">
      <param name="quality" value="high">
      <param name="bgcolor" value="#000000">
      <param name="allowscriptaccess" value="sameDomain">
      <param name="allowfullscreen" value="true">
      <param name="wmode" value="direct">
      <param name="flashvars" value="src=' . $url . '">
    </object>
    ';
    }
    if (isset($embedCode)) {
        $element[0]['#markup'] = $embedCode; // Assign it to the #markup of the element
    }
    return $element;
}


/**
 * Custom Stream Wrapper for AMS application area
 */
/**
 * Implements hook_stream_wrappers().
 */
function ams_uploader_stream_wrappers() {
    return array(
        'ams' => array(
            'name' => t('AMS Application media files'),
            'class' => 'AMSStreamWrapper',
            'description' => t('Adobe Media server base directory for streaming purposes.'),
            'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
        ),
    );
}

/**
 * Default files (ams://) stream wrapper class.
 */
class AMSStreamWrapper extends DrupalPublicStreamWrapper {
    public function getDirectoryPath() {
        return '/opt/adobe/ams';
    }
}